GENERATOR_PROMPTS = {
    "prompt1_clustering": (
        "You will receive a user query, a relevant segment retrieved from a database and what was previously generated by you with the previous retrieved segments. "
        "Your task is to decide if the segment provided to you adds to what was generated before and if the relevant document has some piece of information not previously talked about "
        "in the pre-generated text then you will add the new information. "
        "Don't add any sentence if there is no new information in the segment. "
        "Only add one sentence without repeating information. "
        "Try to keep the coherence of the text intact if you add a new sentence. "
        "Do not include any information beyond what is discussed in the document. "
        "Don't say things like 'Based on the information provided...' that shows that you are using a segment to answer the query. "
        "DON'T REPEAT INFORMATION THAT IS MENTIONED IN THE PREVIOUSLY GENERATED TEXT. "
        "User query: {query} "
        "Relevant document: {data}"
        "What was generated before: {pre_generated} "
        ),
    "prompt2_clustering": (
        "You are an expert system that is expected to answer queries of a user in an informative, non-repetitive, precise and concise way. "
        "You answer questions of users by utilizing information in relevant documents. "
        "You construct your answers in turns. "
        "The workflow is as follows: "
        "1. You look at what you generated in the previous turns and internalize"
        "2. You look at the relevant document provided and decide if it has any information that was not previously mentioned in the previous turns(don't write anything in this step)"
        "3."
        "a. If you see that there is information that you can add you add to the end of the text from the previous terms WITH ONLY ONE SENTENCE."
        "b. If you see no information that you can add from the relevant document you don't write anything."
        "User query: {query} "
        "Relevant document: '{data}' "
        "What was generated before: {pre_generated} "
        ),
    "prompt3_clustering": (
        "You answer questions of users by utilizing information in relevant documents. "
        "You construct your answers in turns by incorporating new information to the previously generated answer text. "
        "Be careful not to repeat information previously mentioned in the already generated text. "
        "Be precise. "
        "Keep your answers as sentences DON'T list anything. "
        "Don't give me reasoning and just give me the new sentences. "
        "User question: {query} "
        "What was generated before: {pre_generated} "
        "Use this new information to add to the generated list: {new_info} "
        ),
    "current_clustering": (
        "You construct your answers to questions in turns by incorporating new information to the previously generated answer text. "
        "You get a list of information each turn and add to the text generated in previous turns ONLY IF the document presents new information. "
        "Be careful not to repeat information previously mentioned in the already generated text. "
        "Be precise. "
        "Don't give me reasoning and just give me the new sentences. "
        "Don't cite yourself. "
        "Don't list information, give me senteces that can be fluently added to the pre-generated text. "
        "This is turn {turn_no}. "
        "Question: {query} "
        "Use this list of information to add to the text generated: {new_info} "
        "Text generated in previous turns (You need to add to the end of this, REMEMBER ONLY NEW INFORMATION): {pre_generated} "
        )
}
META_PROMPTS = {
    "current": (
        "You are a meta agent that inspects information in a document detects unique pieces of information in it looking at previously talked about information. \n"
        "The previously talked about information has already been written about so don't include in ANY CIRCUMSTANCES any info already present in the old info list. \n"
        "Look at what was written about in previous turns and detect the new piece(s) of information in the new document. \n"
        "Give me new information only in a list format. \n"
        "NEVER REPEAT INFORMATION ALREADY PRESENT IN THE PRE-GENERATED TEXT. \n"
        "DON'T include any list item mentioning what the document doesn't talk about. \n"
        "New document: '{data}' \n"
        "Old info list: {pre_generated} \n"
        "The new information is (LOOK AT PREVIOUS INFORMATION AND DON'T REPEAT): '''YOUR_ANSWER'''"
        )
}

# Function to get a prompt by name
def get_prompt(agent_name,prompt_name):
    prompt = ""
    if agent_name == "meta":
        prompt = META_PROMPTS.get(prompt_name, "Prompt not found")
    if agent_name == "generator":
        prompt = GENERATOR_PROMPTS.get(prompt_name, "Prompt not found")

    return prompt

